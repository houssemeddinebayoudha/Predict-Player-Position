# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['Player_Pos']

# Cell
from fastai.vision.all import *
from fastai.vision.widgets import *
class Player_Pos:




    def get_data(
        self,f_name,valid_pct=0.2,seed=42,size=128
    ):
        """
        Create a DataBlock and Load it using the path generated from the f_name
        ***********************************************************************
        Params:
        -------
        f_name : The name of the folder containing the training images.
        valid_pct : The percentage of data to use as a validation set (default 0.2).
        seed: The seed to use (default 42).
        size: The value you will give to the Resize() method.
        """


        Players = DataBlock(
        blocks=(ImageBlock, CategoryBlock),
        get_items=get_image_files,
        splitter=RandomSplitter(valid_pct=0.2, seed=42),
        get_y=parent_label,
        item_tfms=Resize(size))

        self.dls = Players.dataloaders(f_name)

    def check_dls(
        self,n=3,rows=1
    ):
        """
        Display images from the dls (validation set)
        ******************************************************************************
        Params:
        ---------
        n : The Number Of Images To Show (default 3).
        rows : The number of rows you want the images to be displayed on (default 1) .
        """
        self.dls.valid.show_batch(max_n=n, nrows=rows)
    def def_model(
        self,resnet=None,metric=None
    ):
        """
        Define the model
        ******************************************************************************
        Params:
        ---------
        dls : The dls you want the model to train on.
        resnet : Num of the Residual neural network you want to use.
        """
        self.learn = cnn_learner(self.dls, resnet,metrics=metric)
    def tune_model(
        self,epoch=4,lr=0
    ):
        """
        train the model using 'fine_tune()' method
        ******************************************************************************
        Params:
        ---------
        n_epoch : The number of epochs you want the model to train on.
        lr : The learning rate.
        """
        if(lr):
            self.learn.fine_tune(epoch,lr)
        else:
            self.learn.fine_tune(epoch)
    def train_model(
        self,epoch=4,lr=0
    ):
        """
        train the model using 'fit_one_cycle()' method
        ******************************************************************************
        Params:
        ---------
        epoch : The number of epochs you want the model to train on.
        lr : The learning rate.
        """
        if(lr):
            self.learn.fit_one_cycle(epoch,lr)
        else:
            self.learn.fit_one_cycle(epoch)
    def save_weights(
        self,m_name
    ):
        """
        Saves the trained model's weights
        *********************************
        Params:
        -------
        m_name : The name you want your model to have.
        """
        self.learn.save(m_name)

    def Confusion_matrix(
        self,size=(7,7)
    ):
        """
        Plots the confusion matrix
        **************************
        """
        interp = ClassificationInterpretation.from_learner(self.learn)
        interp.plot_confusion_matrix(figsize=size)
    def load_weights(
       self,m_name
    ):
        """
        Loads the trained model's weights
        ****************************************
        """

        self.learn.load(m_name);
    def error_viewer(
    self
    ):
        #hide_output
        self.cleaner = ImageClassifierCleaner(self.learn)
        return self.cleaner
    def error_solver(
    self,f_name
    ):
        path=Path(f_name)
        for idx in self.cleaner.delete(): self.cleaner.fns[idx].unlink()
        for idx,cat in self.cleaner.change(): shutil.move(str(self.cleaner.fns[idx]), path/cat)
